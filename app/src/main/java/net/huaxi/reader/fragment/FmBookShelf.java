package net.huaxi.reader.fragment;import android.annotation.TargetApi;import android.content.Intent;import android.graphics.Bitmap;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.helper.ItemTouchHelper;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.android.volley.Response;import com.android.volley.VolleyError;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.tools.commonlibs.cache.RequestQueueManager;import com.tools.commonlibs.tools.LogUtils;import com.tools.commonlibs.tools.MD5Utils;import net.huaxi.reader.R;import net.huaxi.reader.activity.BookRecordActivity;import net.huaxi.reader.activity.LoginActivity;import net.huaxi.reader.activity.MainActivity;import net.huaxi.reader.activity.WebViewActivity;import net.huaxi.reader.adapter.AdapterBookShelf;import net.huaxi.reader.adapter.BaseRecyclerAdapter;import net.huaxi.reader.bean.Recommended;import net.huaxi.reader.common.AppContext;import net.huaxi.reader.common.Constants;import net.huaxi.reader.common.EnterBookContent;import net.huaxi.reader.common.SharePrefHelper;import net.huaxi.reader.common.URLConstants;import net.huaxi.reader.common.UserHelper;import net.huaxi.reader.db.dao.BookDao;import net.huaxi.reader.db.model.BookTable;import net.huaxi.reader.https.GetRequest;import net.huaxi.reader.https.ResponseHelper;import net.huaxi.reader.model.ShelfTopRecommendedHelper;import net.huaxi.reader.statistic.ReportUtils;import net.huaxi.reader.thread.BookShelfSyncInitDataTask;import net.huaxi.reader.thread.SycnDeleteFailedBookTask;import net.huaxi.reader.util.EventBusUtil;import net.huaxi.reader.util.OnStartDragListener;import net.huaxi.reader.util.UMEventAnalyze;import net.huaxi.reader.util.listener.SimpleItemTouchHelperCallback;import net.huaxi.reader.view.WrapContentGridLayoutManager;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.json.JSONArray;import org.json.JSONObject;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.List;import java.util.Random;import hugo.weaving.DebugLog;//书架fragmentpublic class FmBookShelf extends BaseFragment implements OnStartDragListener,SwipeRefreshLayout.OnRefreshListener {    public RelativeLayout rlShelfTitle;    public List<BookTable> shelfBookTables = new ArrayList<BookTable>();    //    PagerIndicator indicator = null;    public SwipeRefreshLayout swipeRefreshLayout;    private RecyclerView rvBookShelf;    private AdapterBookShelf adapterBookShelf;    //title左边imageview    private ImageView ivTitleRight,ivTitleLeft;    //完成按钮    private TextView okTv ;    //顶部的textview    private TextView tvTitle ;    private RecyclerView.LayoutManager layoutManager;    //拖拽帮助类    private ItemTouchHelper mItemTouchHelper;    private View rlShelfNoBook;    //书架帮助类    private ShelfTopRecommendedHelper shelfTopRecommendedHelper;    private BookShelfSyncInitDataTask bookShelfSyncInitDataTask;    //doRightClick点击title右边按钮的事件,同步完成之后才可以删除    private boolean rightClickAble = false;    private TextView shelf_add_free_left;//免费花瓣    private ImageView free_hb_imageView;    public  MyHandler handler;    public class MyHandler extends Handler {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what){                case 0:                    free_hb_imageView.setVisibility(View.GONE);                    shelf_add_free_left.setVisibility(View.GONE);                    break;                case 1://                    shelf_add_free_left.setVisibility(View.VISIBLE);                    if(SharePrefHelper.getBoolean(Constants.SHOW_TASK_STATUS,true)){                        free_hb_imageView.setVisibility(View.VISIBLE);                    }else{                        free_hb_imageView.setVisibility(View.GONE);                    }                    break;            }        }    }    @Override    @Nullable    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable    Bundle savedInstanceState) {        View view = null;        view = inflater.inflate(R.layout.fm_shelf, container, false);        initView(view);        initData();        //判断用户是否登陆        if (!UserHelper.getInstance().isLogin() ) {            if(Constants.CHANNEL_IS_HUAWEI){                if(MainActivity.getConnect() != null && MainActivity.getConnect().isConnected()){                    UMEventAnalyze.countEvent(getActivity(), UMEventAnalyze.USER_TO_LOGIN);                    Intent intent = new Intent(getActivity(), LoginActivity.class);                    intent.putExtra("flag",true);                    startActivity(intent);                }else{                }            }else {                UMEventAnalyze.countEvent(getActivity(), UMEventAnalyze.USER_TO_LOGIN);                Intent intent = new Intent(getActivity(), LoginActivity.class);                intent.putExtra("flag", true);                startActivity(intent);            }        }        return view;    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        EventBus.getDefault().register(this);        handler = new MyHandler();        AppContext.appContext.setHandler2(handler);    }    @Override    public void onResume() {        super.onResume();        ReportUtils.setUserSceneTag(Constants.BUGLY_SCENE_TAG_BOOKSHELF);        rightClickAble = false;        if (adapterBookShelf != null) {            adapterBookShelf.setDeleteState(false);        }        ivTitleRight.setImageResource(R.drawable.selector_shelf_title_right_img);        /**         * 此处优先执行syncData(),然后再执行syncInitData()的策略,是为了解决由于网络延时导致数据返回慢的状况。         * 相当于先加载本地数据,然后等到网络数据返回并写入本地数据库后,再次读取本地数据,进行刷新。         */        setHeadBackground(true);        refreshLocalData(); //加载本地数据        refreshNetData();//异步加载网络数据        AsyncDeleteBook();//同步未删除成功数据        UMEventAnalyze.countEvent(getActivity(), UMEventAnalyze.BOOK_SHELF_PAGE);    }    public AdapterBookShelf getBookShelfAdapter() {        return adapterBookShelf;    }    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)    private void initView(View view) {        swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.shelf_book_refreshlayout);        swipeRefreshLayout.setColorSchemeResources(R.color.c01_themes_color);        swipeRefreshLayout.setOnRefreshListener(this);        tvTitle = (TextView) view.findViewById(R.id.shelf_title_textview);        rvBookShelf = (RecyclerView) view.findViewById(R.id.shelf_book_recyclerview);        layoutManager = new WrapContentGridLayoutManager(getActivity(), 3);        rvBookShelf.setLayoutManager(layoutManager);        okTv = (TextView) view.findViewById(R.id.shelf_ok_tv);        rlShelfTitle = (RelativeLayout) view.findViewById(R.id.shelf_title_layout);        ivTitleLeft = (ImageView) view.findViewById(R.id.shelf_title_left_imageview);        ivTitleRight = (ImageView) view.findViewById(R.id.shelf_title_right_imageview);        ((TextView) view.findViewById(R.id.bookshelf_nobook_textview)).setText(R.string.bookshelf_nobook);        rlShelfNoBook = view.findViewById(R.id.shelf_nobook_layout);        shelf_add_free_left = (TextView) view.findViewById(R.id.shelf_add_free_left);        free_hb_imageView = (ImageView) view.findViewById(R.id.free_hb_imageView);    }    private void initRecommend() {        //初始化推荐数据        GetRequest request2 = new GetRequest(URLConstants.RECOMMEND_URL, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                LogUtils.debug("推荐页===" + response.toString());                if (ResponseHelper.isSuccess(response)) {                    JSONObject jsonObject = ResponseHelper.getVdata(response);                    if (jsonObject != null) {                        JSONArray json = jsonObject.optJSONArray("list");                        Type type = new TypeToken<ArrayList<Recommended>>() {                        }.getType();                        List<Recommended> recommendedList = new Gson().fromJson(json.toString(), type);                        if (shelfTopRecommendedHelper != null) {                            shelfTopRecommendedHelper.initData(recommendedList.get(new Random().nextInt(recommendedList.size())));                        }                    }                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                ReportUtils.reportError(error);            }        });        RequestQueueManager.addRequest(request2);    }    private void initEvent() {        if (adapterBookShelf != null)            adapterBookShelf.setOnItemClickListener(new BaseRecyclerAdapter.OnItemClickListener() {                @Override                public void onItemClick(int position, Object data) {                    if (adapterBookShelf.getDeleteState()) return;                    BookTable book = (BookTable) data;                    book.setLastReadDate(System.currentTimeMillis());                    book.setHasNewChapter(0);                    BookDao.getInstance().updateBook(book);                    EnterBookContent.openBookDetail(getActivity(), book.getBookId());                    UMEventAnalyze.countEvent(getActivity(), UMEventAnalyze.BOOK_SHELF_START);                }            });        ivTitleLeft.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent it = new Intent(getActivity(), BookRecordActivity.class);                startActivity(it);            }        });        ivTitleRight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (adapterBookShelf.mDatas.size() == 0 && !adapterBookShelf.getDeleteState()) {                    return;                }                doTitleRightClick();                UMEventAnalyze.countEvent(getActivity(), UMEventAnalyze.BOOK_SHELF_TO_DELETE);            }        });        okTv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (adapterBookShelf.mDatas.size() == 0 && !adapterBookShelf.getDeleteState()) {                    return;                }                doTitleRightClick();            }        });        rlShelfNoBook.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //判断书架是否有书，如果没有则用户点击界面自动跳转到书城界面                if (getActivity() instanceof MainActivity) {                    MainActivity activity = (MainActivity) getActivity();                    activity.getVpMain().setCurrentItem(2);                }            }        });        //免费领花瓣        free_hb_imageView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startTaskActivity();            }        });        //免费领花瓣        shelf_add_free_left.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startTaskActivity();            }        });    }    public void startTaskActivity(){        String userID = UserHelper.getInstance().getUserId();        String deviceType = "android";        String MD5_SECRET = "1W4h7$9+*3@";        String token = MD5Utils.MD5("userID="+userID+"&deviceType="+deviceType+MD5_SECRET);        String url = URLConstants.url_base2+"/w/AppTask.aspx?userID="+userID+"&deviceType=android&_token="+token;        WebViewActivity.goToWebView(getActivity(),url);    }    //设置一些adapter和上下文设置，具体获取数据找getData方法    private void initData() {        shelfBookTables.addAll(BookDao.getInstance().findShelfBooks());        adapterBookShelf = new AdapterBookShelf(FmBookShelf.this, shelfBookTables);        rvBookShelf.setAdapter(adapterBookShelf);        shelfTopRecommendedHelper = new ShelfTopRecommendedHelper(getActivity(), rvBookShelf, adapterBookShelf);        adapterBookShelf.setDragListener(this);        ItemTouchHelper.Callback callback = new SimpleItemTouchHelperCallback(adapterBookShelf);        mItemTouchHelper = new ItemTouchHelper(callback);        mItemTouchHelper.attachToRecyclerView(rvBookShelf);        initRecommend();        initEvent();    }    /**     * 刷新本地数据。     */    public void refreshLocalData() {        if (getActivity() == null || getActivity().isFinishing()) {            return;        }        shelfBookTables.clear();        shelfBookTables.addAll(BookDao.getInstance().findShelfBooks());        List<BookTable> list = BookDao.getInstance().findAllBook();        adapterBookShelf.notifyDataSetChanged();        if (shelfBookTables.size() == 0) {            rlShelfNoBook.setVisibility(View.VISIBLE);        } else {            rlShelfNoBook.setVisibility(View.GONE);        }        rightClickAble = true;    }    /**     *与服务器同步未删除成功的用户书籍     */    private void AsyncDeleteBook() {        //// TODO: 16/8/31 单独把这部分代码拽出来,放到独立的异步任务中执行        if (getActivity() != null) {            SycnDeleteFailedBookTask sycnDeleteFailedBookTask = new SycnDeleteFailedBookTask(getActivity());            sycnDeleteFailedBookTask.execute();        }    }    /**     * 是否需要添加虚化图     *     * @param setheader     */    public void setHeadBackground(boolean setheader) {        if (adapterBookShelf == null) {            return;        }//        if (recentlyBookTables.size() > 0) {//            if (!"".equals(recentlyBookTables.get(0).getCoverImageId())) {//                getBackground(recentlyBookTables.get(0).getCoverImageId());//                rlShelfNoBook.setVisibility(View.GONE);//            }//        }    }    @Subscribe    public void onEvent(EventBusUtil.EventBean eventBean) {        if (null != eventBean && eventBean.getModle() == EventBusUtil.EVENTMODEL_BOOKSHELF && eventBean.getType() == EventBusUtil.EVENTTYPE_UPDATE_SHELF) {            if (adapterBookShelf != null) {                if (bookShelfSyncInitDataTask.canshow) {                    refreshLocalData();                }            }        }    }    @DebugLog    private void refreshNetData() {        bookShelfSyncInitDataTask = new BookShelfSyncInitDataTask(FmBookShelf.this);        bookShelfSyncInitDataTask.execute();    }    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        LogUtils.debug("setUserVisibleHint==" + isVisibleToUser);        if (!isVisibleToUser) {            //离开了这个界面让adapter为            if (adapterBookShelf != null && adapterBookShelf.getDeleteState()) {                adapterBookShelf.setDeleteState(false);                adapterBookShelf.notifyDataSetChanged();                setHeadBackground(true);                if (adapterBookShelf != null) {                    adapterBookShelf.setDeleteState(false);                }                ivTitleRight.setImageResource(R.drawable.selector_shelf_title_right_img);            }        }    }    public void doTitleRightClick() {        if (!rightClickAble) {            return;        }        adapterBookShelf.setDeleteState(!adapterBookShelf.getDeleteState());        adapterBookShelf.notifyDataSetChanged();        if (adapterBookShelf.getDeleteState()) {            okTv.setVisibility(View.VISIBLE);            ivTitleRight.setVisibility(View.GONE);        } else {            okTv.setVisibility(View.GONE);            ivTitleRight.setVisibility(View.VISIBLE);        }    }    int titleColor;    public void setStateBar() {        if (titleColor != 0 && shelfBookTables.size() != 0) {            if (getActivity() != null) {                ((MainActivity) getActivity()).tintManager.setTintColor(titleColor);            } else {                LogUtils.debug("getactivity==null");            }        } else {            ((MainActivity) getActivity()).tintManager.setTintColor(getResources                    ().getColor(R.color.c01_themes_color));        }    }    public void setStateBar(Bitmap bitmap) {    }    @Override    public void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);    }    @Override    public void onStart() {        super.onStart();        if (bookShelfSyncInitDataTask != null)            bookShelfSyncInitDataTask.setCanshow(true);    }    @Override    public void onPause() {        super.onPause();        if (bookShelfSyncInitDataTask != null)            bookShelfSyncInitDataTask.setCanshow(false);    }    @Override    public void onStartDrag(RecyclerView.ViewHolder viewHolder) {        mItemTouchHelper.startDrag(viewHolder);    }    @Override    public void onRefresh() {   //下拉刷新接口回调        refreshNetData();    }    public void hideRefreshState(){        if (swipeRefreshLayout != null) {            swipeRefreshLayout.setRefreshing(false);        }    }}